---
import { getBlogPostBySlug, getCategories } from '../../lib/supabase';
import { parseMarkdown } from '../../lib/markdown';

// Dinamik rota parametresini al
const { slug } = Astro.params;

// İlgili blog yazısını getir
const post = await getBlogPostBySlug(slug);

// Blog yazısı bulunamadıysa hata sayfasına yönlendir
if (!post) {
  return Astro.redirect('/404');
}

// Kategori bilgisini alalım
const categories = await getCategories();
const category = categories.find(cat => cat.id === post.category_id);

// FAQ için bir arayüz tanımlayalım
interface FaqItem {
  question: string;
  answer: string;
}

// İçeriği markdown'dan HTML'e dönüştür
const contentHtml = parseMarkdown(post.content);

// DEBUG: FAQ verisi kontrolü
console.log('Post bilgisi:', { id: post.id, title: post.title, slug: post.slug });
console.log('FAQ tipi:', post.faq ? typeof post.faq : 'undefined');
console.log('FAQ değeri:', post.faq);

// FAQ verisi geçerli mi kontrolü
let processedFaq: FaqItem[] = [];
let hasFaq = false;

// Farklı formatlarda gelebilecek FAQ verilerini işleyelim
if (post.faq && Array.isArray(post.faq)) {
  // 1. Format: {question, answer} yapısında olanlar
  const standardFormat = post.faq.filter((item: any) => 
    item && 
    typeof item === 'object' && 
    (typeof item.question === 'string' || typeof item.Question === 'string') && 
    (typeof item.answer === 'string' || typeof item.Answer === 'string')
  ).map((item: any) => ({
    question: item.question || item.Question,
    answer: item.answer || item.Answer
  }));

  // 2. Format: {soru, cevap} yapısında olanlar (Türkçe key'ler)
  const turkishFormat = post.faq.filter((item: any) =>
    item &&
    typeof item === 'object' &&
    (typeof item.soru === 'string' || typeof item.Soru === 'string') &&
    (typeof item.cevap === 'string' || typeof item.Cevap === 'string')
  ).map((item: any) => ({
    question: item.soru || item.Soru,
    answer: item.cevap || item.Cevap
  }));

  // İki formatı birleştirelim
  processedFaq = [...standardFormat, ...turkishFormat];
  
  // SSS alternatif alanı
  if (processedFaq.length === 0 && post.sss && Array.isArray(post.sss)) {
    const sssFormat = post.sss.filter((item: any) =>
      item &&
      typeof item === 'object' &&
      (typeof item.soru === 'string' || typeof item.question === 'string') &&
      (typeof item.cevap === 'string' || typeof item.answer === 'string')
    ).map((item: any) => ({
      question: item.soru || item.question,
      answer: item.cevap || item.answer
    }));
    
    processedFaq = [...processedFaq, ...sssFormat];
  }
  
  hasFaq = processedFaq.length > 0;
  console.log('Toplam işlenmiş FAQ sayısı:', processedFaq.length);
  if (processedFaq.length > 0) {
    console.log('İlk FAQ örneği:', processedFaq[0]);
  }
}

console.log('hasFaq değeri:', hasFaq);

const pageTitle = post.title;
---

<html lang="tr">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>{pageTitle}</title>
		<meta name="description" content={post.meta_description} />
		<meta name="keywords" content={post.keywords ? post.keywords.join(', ') : ''} />
		<style>
			body {
				font-family: Arial, sans-serif;
				max-width: 800px;
				margin: 0 auto;
				padding: 20px;
				line-height: 1.6;
			}
			header {
				border-bottom: 1px solid #ddd;
				margin-bottom: 20px;
				padding-bottom: 10px;
			}
			.nav-links {
				display: flex;
				gap: 15px;
				margin-bottom: 20px;
			}
			.post-header {
				margin-bottom: 30px;
			}
			.post-title {
				margin-bottom: 10px;
				font-size: 2rem;
			}
			.post-meta {
				display: flex;
				justify-content: space-between;
				color: #666;
				font-size: 0.9rem;
				margin-bottom: 20px;
			}
			.post-category {
				background-color: #e8f5e9;
				display: inline-block;
				padding: 3px 8px;
				border-radius: 4px;
				margin-right: 10px;
			}
			.post-content {
				margin-bottom: 30px;
			}
			.post-content h2 {
				margin-top: 1.5em;
				margin-bottom: 0.5em;
				font-size: 1.6rem;
			}
			.post-content h3 {
				margin-top: 1.2em;
				margin-bottom: 0.5em;
				font-size: 1.4rem;
			}
			.post-content p {
				margin-bottom: 1em;
			}
			.post-content ul, .post-content ol {
				margin-bottom: 1em;
				padding-left: 2em;
			}
			.post-content blockquote {
				border-left: 4px solid #ddd;
				padding-left: 1em;
				margin-left: 0;
				margin-right: 0;
				font-style: italic;
				color: #555;
			}
			.post-content pre {
				background-color: #f5f5f5;
				padding: 1em;
				border-radius: 4px;
				overflow-x: auto;
			}
			.post-content code {
				background-color: #f5f5f5;
				padding: 0.2em 0.4em;
				border-radius: 4px;
				font-family: monospace;
			}
			.featured-image {
				width: 100%;
				max-height: 400px;
				object-fit: cover;
				border-radius: 4px;
				margin-bottom: 20px;
			}
			.faq-section {
				margin-top: 40px;
				background-color: #f4f4f4;
				padding: 20px;
				border-radius: 4px;
			}
			.faq-item {
				margin-bottom: 20px;
			}
			.faq-question {
				font-weight: bold;
				margin-bottom: 5px;
			}
			.faq-answer {
				margin-left: 1em;
			}
			footer {
				margin-top: 30px;
				border-top: 1px solid #ddd;
				padding-top: 10px;
				font-size: 0.9em;
				color: #666;
			}
		</style>
	</head>
	<body>
		<header>
			<h1>Blog</h1>
			<div class="nav-links">
				<a href="/">Ana Sayfa</a>
				<a href="/kategoriler">Kategoriler</a>
				<a href="/hakkinda">Hakkında</a>
			</div>
		</header>
		
		<main>
			<article>
				<div class="post-header">
					<h1 class="post-title">{post.title}</h1>
					<div class="post-meta">
						<div>
							{category && (
								<a href={`/kategori/${category.slug}`} class="post-category">
									{category.name}
								</a>
							)}
							<span>Tarih: {new Date(post.created_at).toLocaleDateString('tr-TR')}</span>
						</div>
					</div>
					
					{post.featured_image && (
						<img 
							src={post.featured_image} 
							alt={post.title} 
							class="featured-image"
						/>
					)}
				</div>
				
				<div class="post-content">
					<div set:html={contentHtml} />
				</div>
				
				{hasFaq && (
					<div class="faq-section">
						<h2>Sık Sorulan Sorular</h2>
						{processedFaq.map((item: FaqItem) => (
							<div class="faq-item">
								<div class="faq-question">{item.question}</div>
								<div class="faq-answer" set:html={parseMarkdown(item.answer)} />
							</div>
						))}
					</div>
				)}
			</article>
		</main>
		
		<footer>
			<p>© {new Date().getFullYear()} Coolify Test Projesi</p>
		</footer>
	</body>
</html> 