---
// SEO ve performans odaklı optimize edilmiş görsel bileşeni
import { Image as AstroImage } from 'astro:assets';

interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  format?: 'webp' | 'avif' | 'png' | 'jpeg' | 'jpg';
  quality?: number;
  densities?: number[];
  loading?: 'lazy' | 'eager';
  decoding?: 'async' | 'sync' | 'auto';
  fetchpriority?: 'high' | 'low' | 'auto';
}

const { 
  src, 
  alt,
  width = 800,
  height = 570,
  class: className,
  format = 'webp',
  quality = 80, // Daha iyi kalite
  densities = [0.5, 1, 1.5, 2],
  loading = 'lazy',
  decoding = 'async',
  fetchpriority = 'auto'
} = Astro.props;

// Hero görseli için (üst bölüm) yüksek öncelik
const isHero = className?.includes('hero');
const calculatedFetchPriority = isHero ? 'high' : fetchpriority;
const calculatedLoading = isHero ? 'eager' : loading;
---

<AstroImage
  src={src}
  alt={alt}
  width={width}
  height={height}
  class={className}
  format={format}
  quality={quality}
  densities={densities}
  loading={calculatedLoading}
  decoding={decoding}
  fetchpriority={calculatedFetchPriority}
/>

<script>
  // Görünür görselleri yüksek önceliğe çekme
  document.addEventListener('DOMContentLoaded', () => {
    if ('IntersectionObserver' in window) {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const img = entry.target;
            if (img instanceof HTMLImageElement && img.loading === 'lazy') {
              img.setAttribute('fetchpriority', 'high');
            }
            observer.unobserve(img);
          }
        });
      });

      document.querySelectorAll('img[loading="lazy"]:not([fetchpriority="high"])').forEach(img => {
        observer.observe(img);
      });
    }
  });
</script> 