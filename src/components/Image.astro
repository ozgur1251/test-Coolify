---
// SEO ve performans odaklı optimize edilmiş görsel bileşeni
import { Image as AstroImage } from 'astro:assets';

interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  format?: 'webp' | 'avif' | 'png' | 'jpeg' | 'jpg';
  quality?: number;
  densities?: number[];
  loading?: 'lazy' | 'eager';
  decoding?: 'async' | 'sync' | 'auto';
  fetchpriority?: 'high' | 'low' | 'auto';
}

const { 
  src, 
  alt,
  width = 1320,
  height = 920,
  class: className,
  format = 'webp',
  quality = 80,
  densities = [0.5, 1, 1.5],
  loading = 'lazy',
  decoding = 'async',
  fetchpriority = 'auto'
} = Astro.props;

// Hero görseli için (üst bölüm) yüksek öncelik
const isHero = className?.includes('hero') || className?.includes('featured-image');
const calculatedFetchPriority = isHero ? 'high' : fetchpriority;
const calculatedLoading = isHero ? 'eager' : loading;

// Mobil cihazlar için daha az yoğunluk (density) kullanarak mobil deneyimi optimize et
const isMobile = Astro.request.headers.get('user-agent')?.toLowerCase().includes('mobile');
const mobileDensities = [0.5, 0.75]; // Mobil cihazlar için daha düşük yoğunluk

// Görsel boyutunu sayfaya göre optimize et
const optimizeWidth = Math.min(width, 1320); // Maksimum genişlik 1320px
const optimizeHeight = Math.round((height / width) * optimizeWidth);
---

<AstroImage
  src={src}
  alt={alt}
  width={optimizeWidth}
  height={optimizeHeight}
  class={className}
  format={format}
  quality={quality}
  densities={isMobile ? mobileDensities : densities}
  loading={calculatedLoading}
  decoding={decoding}
  fetchpriority={calculatedFetchPriority}
/> 